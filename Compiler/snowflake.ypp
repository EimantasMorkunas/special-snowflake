%{
    #include <stdio.h>
    #include <iostream>
    #include <map>
    #include <vector>
    #include "AST/includes.hpp"
    void yyerror (char *s);
    int yylex();
    using namespace std;
    map <string, vector<ParamStruct*>*> paramsOfFunctions;
%}

%union
{ 
    Node* node;
    Code* code;
    Function * function;
    Block* block;
    Statement* statement;
    Expression* expression;
    Assignment* assignment;
    AssignmentBasic* assignmentBasic;
    Identifier* identifier;
    Variable* variable;
    Integer* integer;
	Float* floatVal;
    Parameters* params;
    Parameter* param;
    TypeName* typeName;
    string* s;
	Loop* loop;
	Range* range;
	VarOrInteger* varOrInteger;
	Logical* logical;
	Evaluation* eval;
	Bool* bb;
	BooleanExp* booleanExp;
	Identifiers* identifiers;
	EvalGroup* evalGroup;
	EvalGroupSub* evalGroupSub;
	String* strVal;
	Char* charVal;
    FunctionCall* call;
    CallParameters* callParams;
    CallParameter* callParam;
<<<<<<< Updated upstream
	Number* number;
=======
    Array* array;
    ArrayInit* arrayInit;
>>>>>>> Stashed changes
} 

%start start
%token <node> IF
%token <node> ELSE
%token <node> LOOP
%token FUNC
%token OUT
%token <variable> VAR
%token <s> INTEGER
%token <s> FLOAT
%token <s> CHAR
%token <s> STRING
%token <s> PLUS
%token <s> MINUS
%token <s> MULT
%token <s> DIV
%token <s> MOD
%token RNG
%token NOT_INIT
%token <s> EQ
%token <s> NOT_EQ
%token <s> LTE
%token <s> GTE
%token <s> AND
%token <s> OR
%token ARRAY_INIT
%token <s> INT_NAME
%token <s> FLOAT_NAME
%token <s> CHAR_NAME
%token <s> STRING_NAME
%token <s> BOOLEAN
%token <s> LT
%token <s> GT

%type <block> block statements
%type <statement> statement
%type <expression> exp
%type <assignment> assignment
%type <identifier> identifier
%type <function> func
%type <code> code start
%type <typeName> typeName;
%type <params> funcParams funcParamsSub
%type <param> funcParam
%type <loop> loop
%type <range> range
%type <varOrInteger> varOrInteger
%type <logical> logical
%type <eval> eval
%type <bb> bool
%type <booleanExp> booleanExp
%type <s> logicalOperator
%type <s> comp
%type <identifiers> identifiers
%type <evalGroup> evalGroup
%type <evalGroupSub> evalGroupSub
%type <call> funcCall
%type <callParams> funcCallParams funcCallParamsSub
%type <callParam> funcCallParam
%type <s> operator
%type <number> number
%type <array> array
%type <arrayInit> arrayExp


%left '+' '-'
%left '*' '/' '%'
%left '^'

%%

start           : code                                      {
                                                                $$ = $1;
                                                                CodeGenContext *c = new CodeGenContext(&paramsOfFunctions);
                                                                cout << "#include <stdio.h>" << endl << $$->genCode(c) << endl; delete c;
                                                            }
                ;

code            : func                                      {$$ = new Code(); $$->FunctionList.push_back($1);}
                | code func                                 {$1->FunctionList.push_back($2);}

statements      : statement                                 {$$ = new Block(); $$->StatementList.push_back($1);}
                | statements statement                      {$1->StatementList.push_back($2);}
                ;
                
block           : statements                                {$$ = $1;}
                |                                           {$$ = new Block();}
                ;
                
statement       : assignment                                {}
                | logical                                   {}
                | loop                                      {}
                | funcCall                                  {}
                ;
                
assignment      : VAR '=' exp                               {$$ = new AssignmentBasic($1, $3);}
                | VAR '[' varOrInteger ']' '=' exp          {$$ = new AssignmentArrayElement($1, $3, $6);}
                | VAR '=' array                             {$$ = new AssignmentArray($1, $3);}
                ;

array           : ARRAY_INIT arrayExp ']'                   {$$ = new ArrayAlloc($2);}
                | '[' identifiers ']'                       {$$ = new ArrayEnumed($2);}
                ;

arrayExp        : INTEGER ',' identifier                    {$$ = new ArrayPrefilled($1, $3);}
                | INTEGER                                   {$$ = new ArrayEmpty($1);}
                ;

exp             : identifier                                {$$ = new ExpressionBasic($1);}
                | identifier operator exp                   {$$ = new ExpressionOp($1, $2, $3);}
                | identifier operator '(' exp ')'           {$$ = new ExpressionBrackets($1, $2, $4);}
                ;

operator        : PLUS                                      {}
                | MINUS                                     {}
                | MULT                                      {}
                | DIV                                       {}
                | MOD                                       {}
                ;

logical         : IF eval '{' block '}' ELSE '{' block '}'  {$$ = new Logical(1, $2, $4, $8, nullptr);}
                | IF eval '{' block '}' ELSE logical        {$$ = new Logical(2, $2, $4, nullptr, $7);}
                | IF eval '{' block '}'                     {$$ = new Logical(3, $2, $4, nullptr, nullptr);}
                ;

loop            : LOOP VAR ':' range '{' block '}'          {$$ = new LoopFor($2, $4, $6);}
                | LOOP eval '{' block '}'                   {$$ = new LoopWhile($2, $4);}
                ;

range           : varOrInteger RNG varOrInteger             {$$ = new Range($1, $3);}
                | varOrInteger                              {$$ = new Range(nullptr, $1);}
                ;

eval            : bool logicalOperator eval                 {$$ = new Evaluation($1, (*$2), $3);}
                | bool                                      {$$ = new Evaluation($1, "", nullptr);}
                ;

booleanExp      : evalGroup                                 {$$ = new BooleanExp($1, "false");}
                | BOOLEAN                                   {$$ = new BooleanExp(nullptr, (*$1));}
                ;

logicalOperator : AND                                       {$$ = $1;}
                | OR                                        {$$ = $1;}
                ;
				
identifiers     : identifier                                {$$ = new Identifiers(); $$->IdentifierList.push_back($1);}
                | identifiers ',' identifier                {$1->IdentifierList.push_back($3);}
                ;

evalGroup       : identifiers comp evalGroupSub    			{$$ = new EvalGroup($1, (*$2), $3);}
                ;
                
evalGroupSub    : identifiers comp evalGroupSub    			{$$ = new EvalGroupSub($1, (*$2), $3);}
                | identifiers                      			{$$ = new EvalGroupSub($1, "", nullptr);}
                ;

comp            : LT                                       	{$$ = $1;}
                | GT                                       	{$$ = $1;}
                | LTE                                       {$$ = $1;}
                | GTE                                       {$$ = $1;}
                | EQ                                        {$$ = $1;}
                | NOT_EQ                                    {$$ = $1;}
                ;

number          : INTEGER                                   {$$ = new Integer(*$1); }
                | FLOAT                                     {$$ = new Float(*$1);}
                ;

identifier      : VAR                                       {$$ = new Variable(*$1);}
                | number                                    {}
                | CHAR                                      {$$ = new Char(*$1);}
                | STRING                                    {$$ = new String(*$1);}
                ;

varOrInteger    : VAR                                       {$$ = new VarOrInteger($1, "");}
                | INTEGER                                   {$$ = new VarOrInteger(nullptr, *$1);}
                ;

bool            : booleanExp                                {$$ = new Bool($1, false);}
                | NOT_INIT booleanExp ')'                   {$$ = new Bool($2, true);}
                ;

func            : FUNC VAR '(' funcParams ')' '{' block '}' {
                                                                $$ = new Function($2, $4, $7);
                                                                vector<ParamStruct*>* bs = new vector<ParamStruct*>();
                                                                for(vector<Parameter*>::iterator it = $4->ParameterList.begin(); it != $4->ParameterList.end(); ++it)
                                                                {
                                                                    bs->push_back(new ParamStruct(&((*it)->name->name), (*it)->type->name, (*it)->isOut));
                                                                }
                                                                paramsOfFunctions[$2->name] = bs;
                                                            }
                ;
                
funcParamsSub   : funcParam                                 {$$ = new Parameters(); $$->ParameterList.push_back($1);}
                | funcParamsSub ',' funcParam               {$1->ParameterList.push_back($3);}
                ;
                
funcParams      : funcParamsSub                             {$$ = $1;}
                |                                           {$$ = new Parameters();}
                ;
                
funcParam       : typeName VAR                              {$$ = new Parameter($2, $1, false);}
                | typeName OUT VAR                          {$$ = new Parameter($3, $1, true);}
                ;
                
funcCall        : VAR '(' funcCallParams ')'                {$$ = new FunctionCall($1, $3);}
                ;
                
funcCallParamsSub : funcCallParam                           {$$ = new CallParameters(); $$->CallParameterList.push_back($1);}
                  | funcCallParamsSub ',' funcCallParam     {$1->CallParameterList.push_back($3);}
                  ;
                    
funcCallParams  : funcCallParamsSub                         {$$ = $1;}
                |                                           {$$ = new CallParameters();}
                ;                 

funcCallParam   : identifier                                {$$ = new CallParameter($1, false);}
                | OUT identifier                            {$$ = new CallParameter($2, true);}
                ;

typeName        : INT_NAME                                  {$$ = new TypeName($1);}
                | FLOAT_NAME                                {$$ = new TypeName($1);}
                | CHAR_NAME                                 {$$ = new TypeName($1);}
                | STRING_NAME                               {$$ = new TypeName($1);}
                ;

%%

void yyerror (char *s) {printf ("%s\n", s);}
